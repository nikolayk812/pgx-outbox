// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"
	outbox "outbox"

	mock "github.com/stretchr/testify/mock"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// Mark provides a mock function with given fields: ctx, ids
func (_m *Reader) Mark(ctx context.Context, ids []int64) (int64, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for Mark")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) (int64, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) int64); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, filter, limit
func (_m *Reader) Read(ctx context.Context, filter outbox.MessageFilter, limit int) ([]outbox.Message, error) {
	ret := _m.Called(ctx, filter, limit)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 []outbox.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, outbox.MessageFilter, int) ([]outbox.Message, error)); ok {
		return rf(ctx, filter, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, outbox.MessageFilter, int) []outbox.Message); ok {
		r0 = rf(ctx, filter, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]outbox.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, outbox.MessageFilter, int) error); ok {
		r1 = rf(ctx, filter, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
